View(tag2)
tag_per_champion = tag1 + tag2
tag_per_champion = tag1.N + tag2.N
tag1.N
help(join_by)
browseVignettes(dyplr)
browseVignettes("dyplr")
browseVignettes("dplyr")
champions_per_tag <-
bind_cols(tag1,tag2)
View(champions_per_tag)
View(champions_per_tag)
colnames(champions_per_tag)
champions_per_tag <-
bind_cols(tag1,tag2) %>%
select(tag1, N...2, N...4) %>%
group_by(tag1) %>%
summarise(quantity = mutate(N..2 + N...4))
champions_per_tag <-
bind_cols(tag1,tag2) %>%
select(tag1, N...2, N...4) %>%
group_by(tag1) %>%
summarise(quantity = mutate(N..2 + N...4))
colnames(champions_per_tag)
champions_per_tag <-
bind_cols(tag1,tag2) %>%
select(tag1, N...2, N...4) %>%
summarise(quantity = mutate(N..2 + N...4))
champions_per_tag <-
bind_cols(tag1,tag2) %>%
select(tag1, N...2, N...4)
help(bind_cols)
help(bind_cols)
champions_per_tag <-
bind_cols(tag1,tag2, .name_repair = c('universal', 'universal', 'unique', 'unique'))
colnames(champions_per_tag)
champions_per_tag <-
bind_cols(tag1,tag2, .name_repair = c('universal', 'universal', 'unique', 'unique')) %>%
clean_names()
colnames(champions_per_tag)
champions_per_tag <-
bind_cols(tag1,tag2, .name_repair = c('universal', 'universal', 'unique', 'unique')) %>%
clean_names() %>%
select(tag1,n_2,n_4) %>%
mutate(total_entries = n_2 + n_4)
View(champions_per_tag)
help(select)
champions_per_tag <-
bind_cols(tag1,tag2, .name_repair = c('universal', 'universal', 'unique', 'unique')) %>%
clean_names() %>%
select(tag1,n_2,n_4) %>%
mutate(total_entries = n_2 + n_4) %>%
select(tag1, total_entries) %>%
rename(tag1 = tag)
champions_per_tag <-
bind_cols(tag1,tag2, .name_repair = c('universal', 'universal', 'unique', 'unique')) %>%
clean_names() %>%
select(tag1,n_2,n_4) %>%
mutate(total_entries = n_2 + n_4) %>%
select(tag1, total_entries)
head(champions_per_tag)
# How many champions per tag are?
lol_champions_tags <- lol_champions_clean %>%
select(name, tags) %>%
separate(tags, sep = ',', into = paste0('tag', 1:2))
View(lol_champions_tags)
lol_champions_tags %>%
select(name, tag1) %>%
group_by(tag1) %>%
summarise(N = n()) -> tag1
lol_champions_tags %>%
select(name, tag2) %>%
drop_na() %>%
group_by(tag2) %>%
summarise(N = n()) -> tag2
champions_per_tag <-
bind_cols(tag1,tag2) %>%
clean_names() %>%
select(tag1,n_2,n_4) %>%
mutate(total_entries = n_2 + n_4) %>%
select(tag1, total_entries)
head(champions_per_tag)
# Importing Tidyverse packages to make the analysis
library(tidyverse)
# We need to clean the data
library(janitor)
# How many champions per tag are?
lol_champions_tags <- lol_champions_clean %>%
select(name, tags) %>%
separate(tags, sep = ',', into = paste0('tag', 1:2))
lol_champions_tags %>%
select(name, tag1) %>%
group_by(tag1) %>%
summarise(N = n()) -> tag1
lol_champions_tags %>%
select(name, tag2) %>%
drop_na() %>%
group_by(tag2) %>%
summarise(N = n()) -> tag2
champions_per_tag <-
bind_cols(tag1,tag2) %>%
clean_names() %>%
select(tag1,n_2,n_4) %>%
mutate(total_entries = n_2 + n_4) %>%
select(tag1, total_entries)
head(champions_per_tag)
# Importing the dataset
lol_champions <- read_csv('./datasets/LoL_champions.csv')
lol_champions_clean <- clean_names(lol_champions)
# How many champions per tag are?
lol_champions_tags <- lol_champions_clean %>%
select(name, tags) %>%
separate(tags, sep = ',', into = paste0('tag', 1:2))
lol_champions_tags %>%
select(name, tag1) %>%
group_by(tag1) %>%
summarise(N = n()) -> tag1
lol_champions_tags %>%
select(name, tag2) %>%
drop_na() %>%
group_by(tag2) %>%
summarise(N = n()) -> tag2
champions_per_tag <-
bind_cols(tag1,tag2) %>%
clean_names() %>%
select(tag1,n_2,n_4) %>%
mutate(total_entries = n_2 + n_4) %>%
select(tag1, total_entries)
head(champions_per_tag)
head(champions_per_tag)
ggplot(champions_per_tag, aes(x=tag1, y=total_entries)) + geom_bar()
ggplot(champions_per_tag, aes(x=tag1, y=total_entries)) + geom_bar(stat='identity')
head(champions_per_tag)
as.data.frame(table(unlist(strsplit(lol_champs$tags, ",", fixed=TRUE))))
as.data.frame(table(unlist(strsplit(lol_champions_clean$tags, ",", fixed=TRUE))))
lol_champions_clean$tags
help("strsplit")
help("unlist")
(strsplit(lol_champions_clean$tags, ",", fixed=TRUE))
unlist((strsplit(lol_champions_clean$tags, ",", fixed=TRUE)))
l <- tribble (
~movie,~genre1, ~genre2,
'spongebob','comedy','kids',
'pawpatrol','kids','fiction',
'saw','horror','suspense'
)
view(l)
unnest(l, genre1, genre2)
l %>%  unnest(c(genre1, genr,2))
l %>%  unnest(c(genre1, genre2))
l %>%  unlist(c(genre1, genre2))
l %>% unlist(c(genre1, genre2))
l %>% select(genre1, genre2) %>%
unlist()
table (l %>% select(genre1, genre2) %>%
unlist())
help(as.data.frame)
as.data.frame(table(l %>% select(genre1, genre2) %>% unlist())
as.data.frame(table(l %>% select(genre1, genre2) %>% unlist()))
# better way to get the same
as.data.frame(table(unlist(strsplit(lol_champions_clean$tags, ",", fixed=TRUE))))
as.data.frame( table(l %>% select(genre1, genre2) %>% unlist()) )
as.data.frame( table(l %>% select(genre1, genre2) %>% unlist()) , row.name('genre', 'total_entries'))
as.data.frame( table(l %>% select(genre1, genre2) %>% unlist()) , row.names('genre', 'total_entries'))
as.data.frame( table(l %>% select(genre1, genre2) %>% unlist()) , row.names(c('genre', 'total_entries'))
as.data.frame( table(l %>% select(genre1, genre2) %>% unlist()) , row.names(c('genre', 'total_entries')) )
as.data.frame( table(l %>% select(genre1, genre2) %>% unlist()) , row.names( c('genre', 'total_entries') ))
as.data.frame( table(l %>% select(genre1, genre2) %>% unlist()) , col.names( c('genre', 'total_entries') ))
as.data.frame( table(l %>% select(genre1, genre2) %>% unlist()) , row.names( c('genre', 'total_entries') ))
as.data.frame( table(l %>% select(genre1, genre2) %>% unlist()) %>%  setNames( c('genre', 'total_entries') ))
as.data.frame( table(l %>% select(genre1, genre2) %>% unlist()))) setNames( c('genre', 'total_entries')
as.data.frame( table(l %>% select(genre1, genre2) %>% unlist()))) %>%  setNames( c('genre', 'total_entries')
as.data.frame( table(l %>% select(genre1, genre2) %>% unlist())))
as.data.frame( table(l %>% select(genre1, genre2) %>% unlist()))
as.data.frame( table(l %>% select(genre1, genre2) %>% unlist())) setNames( c('genre', 'total_entries')
as.data.frame( table(l %>% select(genre1, genre2) %>% unlist())) %>%  setNames( c('genre', 'total_entries')
as.data.frame( table(l %>% select(genre1, genre2) %>% unlist()))
l %>%
select(genre1,genre2) %>%
unlist() %>%
as.data.frame() %>%
setNames(c('genre', 'total_entries'))
l %>%
select(genre1,genre2) %>%
unlist() %>%
table %>%
as.data.frame() %>%
setNames(c('genre', 'total_entries'))
help(table)
help(table)
help(table)
unlist((strsplit(lol_champions_clean$tags, ",", fixed=TRUE)))
source("~/Documents/courses/r/testing-so-things.R")
library(tidyverse)
data(penguins)
+ geom_point(mapping = aes(y = body_mass_g, x = flipper_length_mm))
hotel_bookings <- read.csv("hotel_bookings.csv")
head(hotel_bookings)
library(ggplot2)
library(ggplot2)
library(ggplot2)
library(ggplot2)
library(ggplot2)
ggplot(data = hotel_bookings) +
geom_point(mapping = aes(x = lead_time, y = children))
head(hotel_bookings)
ggplot(data = hotel_bookings) +
geom_point(mapping = aes(x = stays_in_weekend_nights, y = children))
head(hotel_bookings)
stays_in_weekend_nights %>%  unlist()
hotel_bookings %>%
select(stays_in_weekend_nights) %>%
unlist()
hotel_bookings %>%
select(stays_in_weekend_nights) %>%
unlist() %>%
table()
hotel_bookings %>%
select(stays_in_weekend_nights > 1)
hotel_bookings %>%
select(stays_in_weekend_nights => 1)
hotel_bookings %>%
select(stays_in_weekend_nights) %>%
filter(stays_in_weekend_nights>1)
hotel_bookings <- read.csv("./datasets/hotel_bookings.csv")
help(read.csv)
hotel_bookings <- read.csv("./datasets/hotel_bookings.csv", )
hotel_bookings <- read.csv("./datasets/hotel_bookings.csv" )
hotel_bookings <- read.csv("./datasets/hotel_bookings.csv" )
hotel_bookings <- read.csv("./datasets/hotel_bookings.csv" )
hotel_bookings <- read.csv("./datasets/hotel_bookings.csv" )
library(tidyverse)
data(penguins)
library(palmerpenguins)
# Supongamos que quieres modelar la relación entre masa corporal y longitud de aletas en las tres especies de pingüino.
ggplot(data = penguins) + geom_point(mapping = aes(y = body_mass_g, x = flipper_length_mm, color=species))
head(penguins)
# Supongamos que quieres modelar la relación entre masa corporal y longitud de aletas en las tres especies de pingüino.
ggplot(data = penguins) + geom_point(mapping = aes(y = body_mass_g, x = flipper_length_mm, color=species, size=sex))
# Supongamos que quieres modelar la relación entre masa corporal y longitud de aletas en las tres especies de pingüino.
ggplot(data = penguins) + geom_point(mapping = aes(y = body_mass_g, x = flipper_length_mm, color=sex, size=species))
# Supongamos que quieres modelar la relación entre masa corporal y longitud de aletas en las tres especies de pingüino.
ggplot(data = penguins) + geom_point(mapping = aes(y = body_mass_g, x = flipper_length_mm, color=sex, Alpha=species))
# Supongamos que quieres modelar la relación entre masa corporal y longitud de aletas en las tres especies de pingüino.
ggplot(data = penguins) + geom_point(mapping = aes(y = body_mass_g, x = flipper_length_mm, color=sex, alpha=species))
# Supongamos que quieres modelar la relación entre masa corporal y longitud de aletas en las tres especies de pingüino.
ggplot(data = penguins) + geom_point(mapping = aes(y = body_mass_g, x = flipper_length_mm, color=species, shape=sex))
# CREAM MAS TIPOS DE VIUSALIZACIONES
ggplot(data=penguins) +
geom_smooth(mapping=aes(x=flipper_length_mm, y=body_mass_g))
# CREAM MAS TIPOS DE VIUSALIZACIONES
ggplot(data=penguins) +
geom_smooth(mapping=aes(x=flipper_length_mm, y=body_mass_g)) +
geom_point(mapping=aes(x=flipper_length_mm, y=body_mass_g))
ggplot(data=penguins) +
geom_smooth(mapping=aes(x=flipper_length_mm, y=body_mass_g, linetype = species))
ggplot(data=penguins) +
geom_smooth(mapping=aes(x=flipper_length_mm, y=body_mass_g)) +
geom_point(mapping=aes(x=flipper_length_mm, y=body_mass_g))
ggplot(data=penguins) +
geom_point(mapping=aes(x=flipper_length_mm, y=body_mass_g))
ggplot(data=penguins) +
geom_smooth(mapping=aes(x=flipper_length_mm, y=body_mass_g)) +
geom_jitter(mapping=aes(x=flipper_length_mm, y=body_mass_g))
ggplot(data=penguins) +
geom_smooth(mapping=aes(x=flipper_length_mm, y=body_mass_g)) + # crea la linea de tendencia
geom_jitter(mapping=aes(x=flipper_length_mm, y=body_mass_g)) # jitter añade ruido
# CREAM MAS TIPOS DE VIUSALIZACIONES
ggplot(data=penguins) +
geom_smooth(mapping=aes(x=flipper_length_mm, y=body_mass_g)) +
geom_point(mapping=aes(x=flipper_length_mm, y=body_mass_g))
ggplot(data=penguins) +
geom_smooth(mapping=aes(x=flipper_length_mm, y=body_mass_g)) + # crea la linea de tendencia
geom_jitter(mapping=aes(x=flipper_length_mm, y=body_mass_g)) # jitter añade ruido
# CREAM MAS TIPOS DE VIUSALIZACIONES
ggplot(data=penguins) +
geom_smooth(mapping=aes(x=flipper_length_mm, y=body_mass_g)) +
geom_point(mapping=aes(x=flipper_length_mm, y=body_mass_g))
ggplot(data=penguins) +
geom_smooth(mapping=aes(x=flipper_length_mm, y=body_mass_g)) + # crea la linea de tendencia
geom_jitter(mapping=aes(x=flipper_length_mm, y=body_mass_g)) # jitter añade ruido
# CREAM MAS TIPOS DE VIUSALIZACIONES
ggplot(data=penguins) +
geom_smooth(mapping=aes(x=flipper_length_mm, y=body_mass_g)) +
geom_point(mapping=aes(x=flipper_length_mm, y=body_mass_g))
ggplot(data=penguins) +
geom_smooth(mapping=aes(x=flipper_length_mm, y=body_mass_g)) + # crea la linea de tendencia
geom_jitter(mapping=aes(x=flipper_length_mm, y=body_mass_g)) # jitter añade ruido
# bar char
ggplot(diamonds) +
geom_bar(mapping=aes(x=cut))
geom_bar(mapping=aes(x=cut, color=cut)
geom_bar(mapping=aes(x=cut, color=cut)
geom_bar(mapping=aes(x=cut)
geom_bar(mapping=aes(x=cut, color=cut) # de manera predeterminada centa el tipo ded atos que hay
geom_bar(mapping=aes(x=cut, color=cut) # de manera predeterminada centa el tipo ded atos que hay
geom_bar(mapping=aes(x=cut, color=cut) # de manera predeterminada centa el tipo ded atos que hay
# bar char
ggplot(diamonds) +
geom_bar(mapping=aes(x=cut, color=cut))# de manera predeterminada centa el tipo ded atos que hay
# bar char
ggplot(diamonds) +
geom_bar(mapping=aes(x=cut, fill=cut))# de manera predeterminada centa el tipo ded atos que hay
# facet_wrap and facate_grid
# bar char
ggplot(diamonds) +
geom_bar(mapping=aes(x=cut, fill=cut)) +
facet_wrap(~sex)
head(penguins)
# facet_wrap and facate_grid
# bar char
ggplot(diamonds) +
geom_bar(mapping=aes(x=cut, fill=cut)) +
facet_wrap(sex)
# facet_wrap and facate_grid
# bar char
head(diamondos)
# facet_wrap and facate_grid
# bar char
head(diamonds)
ggplot(diamonds) +
geom_bar(mapping=aes(x=cut, fill=cut)) +
facet_wrap(clarity)
ggplot(diamonds) +
geom_bar(mapping=aes(x=cut, fill=cut)) +
facet_wrap(price)
ggplot(diamonds) +
geom_bar(mapping=aes(x=cut, fill=cut)) +
facet_wrap(carat)
ggplot(diamonds) +
geom_bar(mapping=aes(x=cut, fill=cut)) +
facet_wrap(cut)
ggplot(diamonds) +
geom_bar(mapping=aes(x=color, fill=cut))
ggplot(diamonds) +
geom_bar(mapping=aes(x=color, fill=cut)) +
facet_wrap(~cut)
ggplot(data=penguins) +
geom_point(mapping = aes(x=flipper_length_mm, y=body_mass_g, color=species))
ggplot(data=penguins) +
geom_point(mapping = aes(x=flipper_length_mm, y=body_mass_g, color=species)) +
facet_wrap(~sex)
ggplot(data=penguins) +
geom_point(mapping = aes(x=flipper_length_mm, y=body_mass_g, color=species)) +
face_grid(~sex)
ggplot(data=penguins) +
geom_point(mapping = aes(x=flipper_length_mm, y=body_mass_g, color=species)) +
face_grid(sex)
ggplot(data=penguins) +
geom_point(mapping = aes(x=flipper_length_mm, y=body_mass_g, color=species)) +
face_grid(sex~species)
ggplot(data=penguins) +
geom_point(mapping = aes(x=flipper_length_mm, y=body_mass_g, color=species)) +
facet_grid(sex~species)
ggplot(data=penguins) +
geom_point(mapping = aes(x=flipper_length_mm, y=body_mass_g, color=species)) +
facet_grid(sex)
ggplot(data=penguins) +
geom_point(mapping = aes(x=flipper_length_mm, y=body_mass_g, color=species)) +
facet_grid(sex)
ggplot(data=penguins) +
geom_point(mapping = aes(x=flipper_length_mm, y=body_mass_g, color=species)) +
facet_grid(sex)
ggplot(data=penguins) +
geom_point(mapping = aes(x=flipper_length_mm, y=body_mass_g, color=species)) +
facet_grid(~sex)
ggplot(data=penguins) +
geom_point(mapping = aes(x=flipper_length_mm, y=body_mass_g, color=species)) +
facet_wrap(~sex)
# adding labels
ggplot(data=penguins) +
geom_point(mapping = aes(x=flipper_length_mm, y=body_mass_g, color=species)) +
labels(title='Palmer Penguins: Body Mass vs. Flipper Length')
# adding labels
ggplot(data=penguins) +
geom_point(mapping = aes(x=flipper_length_mm, y=body_mass_g, color=species)) +
labels(title='Palmer Penguins: Body Mass vs. Flipper Length')
# adding labels
ggplot(data=penguins) +
geom_point(mapping = aes(x=flipper_length_mm, y=body_mass_g, color=species)) +
labels(title='Palmer Penguins: Body Mass vs. Flipper Length')
# adding labels
ggplot(data=penguins) +
geom_point(mapping = aes(x=flipper_length_mm, y=body_mass_g, color=species)) +
labels(title="Palmer Penguins: Body Mass vs. Flipper Length")
# adding labels
ggplot(data=penguins) +
geom_point(mapping = aes(x=flipper_length_mm, y=body_mass_g, color=species))
# adding labels
ggplot(data=penguins) +
geom_point(mapping = aes(x=flipper_length_mm, y=body_mass_g, color=species)) +
labs(title='Palmer Penguins: Body Mass vs. Flipper Length')
# adding labels
ggplot(data=penguins) +
geom_point(mapping = aes(x=flipper_length_mm, y=body_mass_g, color=species)) +
labs(title='Palmer Penguins: Body Mass vs. Flipper Length', subtitle = 'Sample of 3 species of penguins')
# adding labels
ggplot(data=penguins) +
geom_point(mapping = aes(x=flipper_length_mm, y=body_mass_g, color=species)) +
labs(title='Palmer Penguins: Body Mass vs. Flipper Length', subtitle = 'Sample of 3 species of penguins'
caption='Data collected by Dr. Kristen Gorman')
# adding labels
ggplot(data=penguins) +
geom_point(mapping = aes(x=flipper_length_mm, y=body_mass_g, color=species)) +
labs(title='Palmer Penguins: Body Mass vs. Flipper Length', subtitle = 'Sample of 3 species of penguins',
caption='Data collected by Dr. Kristen Gorman')
# adding labels
ggplot(data=penguins) +
geom_point(mapping = aes(x=flipper_length_mm, y=body_mass_g, color=species)) +
labs(title='Palmer Penguins: Body Mass vs. Flipper Length', subtitle = 'Sample of 3 species of penguins',
caption='Data collected by Dr. Kristen Gorman') +
annotate('text', x=220, y=2500, text='The gentoos are the largest')
# adding labels
ggplot(data=penguins) +
geom_point(mapping = aes(x=flipper_length_mm, y=body_mass_g, color=species)) +
labs(title='Palmer Penguins: Body Mass vs. Flipper Length', subtitle = 'Sample of 3 species of penguins',
caption='Data collected by Dr. Kristen Gorman') +
annotate('text', x=220, y=3500, text='The gentoos are the largest')
# adding labels
ggplot(data=penguins) +
geom_point(mapping = aes(x=flipper_length_mm, y=body_mass_g, color=species)) +
labs(title='Palmer Penguins: Body Mass vs. Flipper Length', subtitle = 'Sample of 3 species of penguins',
caption='Data collected by Dr. Kristen Gorman') +
annotate('text', x=220, y=3500, label='The gentoos are the largest')
# adding labels
ggplot(data=penguins) +
geom_point(mapping = aes(x=flipper_length_mm, y=body_mass_g, color=species)) +
labs(title='Palmer Penguins: Body Mass vs. Flipper Length', subtitle = 'Sample of 3 species of penguins',
caption='Data collected by Dr. Kristen Gorman') +
annotate('text', x=220, y=3500, label='The gentoos are the largest',
fontface='bold', size=4.5, color='purple')
gg_save('PenguinChar.png')
# save plots
# 1. In the Plot, click export
# 2. using gg_save -> autmatically save the last plot
help(gg_save)
ggsave('PenguinChar.png')
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = hotel, fill = market_segment))
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = hotel, fill = market_segment))
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = hotel)) +
facet_wrap(~market_segment)
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = market_segment)) +
facet_wrap(~hotel) +
theme(axis.text.x = element_text(angle = 45)) +
labs(title="Comparison of market segments by hotel type for hotel bookings",
caption=paste0("Data from: ", mindate, " to ", maxdate),
x="Market Segment",
y="Number of Bookings")
mindate <- min(hotel_bookings$arrival_date_year)
mindate <- min(hotel_bookings$arrival_date_year)
maxdate <- max(hotel_bookings$arrival_date_year)
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = market_segment)) +
facet_wrap(~hotel) +
theme(axis.text.x = element_text(angle = 45)) +
labs(title="Comparison of market segments by hotel type for hotel bookings",
caption=paste0("Data from: ", mindate, " to ", maxdate),
x="Market Segment",
y="Number of Bookings")
chocolate_ratings <- read_csv('flavors_of_cacao.csv')
glimpse(chocolate_ratings)
library(janitor)
clean_names(chocolate_ratings)
View(chocolate_ratings)
chocolate_ratings <- clean_names(chocolate_ratings)
glimpse(chocolate_ratings)
summarize(chocolate_ratings)
summarize(chocolate_ratings)
str(chocolate_ratings)
tf <- chocolate_ratings %>%
select(rating, cocoa_percent, company)
tf <- chocolate_ratings %>%
select(rating, cocoa_percent, company_location)
View(tf)
View(tf)
View(chocolate_ratings)
tf <- chocolate_ratings %>%
select(rating, cocoa_percent, company_maker_if_known)
View(tf)
tf <- chocolate_ratings %>%
select(rating, cocoa_percent, company_maker_if_known) %>%
summarize(sd=sd(rating))
View(tf)
best_trimmed_flavors_df <- chocolate_ratings %>% filter(rating>=3.9)
View(best_trimmed_flavors_df)
best_trimmed_flavors_df <- chocolate_ratings %>% filter(rating>3.9)
colnames(chocolate_ratings)
best_trimmed_flavors_df <- chocolate_ratings %>% filter(rating>3.9 && cocoa_percent=> 75)
best_trimmed_flavors_df <- chocolate_ratings %>% filter(rating>3.9 && cocoa_percent >=75)
best_trimmed_flavors_df <- chocolate_ratings %>% filter(rating>3.9 && cocoa_percent >=75)
best_trimmed_flavors_df <- chocolate_ratings %>% filter(rating>3.9 & cocoa_percent >=75)
View(best_trimmed_flavors_df)
ggplot(data=best_trimmed_flavors_df) +
geom_bar(mapping = aes(x = company_location))
ggplot(data=best_trimmed_flavors_df) +
geom_bar(mapping = aes(x = company_location, color=rating))
ggplot(data=best_trimmed_flavors_df) +
geom_bar(mapping = aes(x = company_location, fill=rating))
ggplot(data=best_trimmed_flavors_df) +
geom_bar(mapping = aes(x = company_location, fill=rating))
colnames(chocolate_ratings)
ggplot(data=best_trimmed_flavors_df) +
geom_bar(mapping = aes(x = company_location, color=rating))
ggplot(data=best_trimmed_flavors_df) +
geom_bar(mapping = aes(x = company_location, fill = rating))
ggplot(data=best_trimmed_flavors_df) +
geom_bar(mapping = aes(x = company_location, color = rating))
ggplot(data = best_trimmed_flavors_df) + geom_bar(mapping = aes(x = Company.Location, color = Rating)
